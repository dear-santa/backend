<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dearsanta.app.mapper.MemberMapper">

    <select id="findMemberByEmail" resultType="Member">
        SELECT id
        , email
        , nickname
        , role
        , img_url AS "imgUrl"
        , platform
        , refresh_token AS "refreshToken"
        , created_date AS "createdDate"
        , updated_date AS "updatedDate"
        , IS_DELETED AS "isDeleted"
        FROM   member
        WHERE  email = #{email}
    </select>

    <select id="findMemberByMemberId" resultType="Member">
        SELECT id
        , email
        , nickname
        , role
        , img_url AS "imgUrl"
        , platform
        , refresh_token AS "refreshToken"
        , created_date AS "createdDate"
        , updated_date AS "updatedDate"
        , IS_DELETED AS "isDeleted"
        FROM   member
        WHERE  id = #{memberId}
    </select>

    <select id="findMemberByRefreshToken" resultType="Member">
        SELECT id
        , email
        , nickname
        , role
        , img_url AS "imgUrl"
        , platform
        , created_date AS "createdDate"
        , updated_date AS "updatedDate"
        , IS_DELETED AS "isDeleted"
        FROM   member
        WHERE  refresh_token = #{refreshToken, jdbcType=VARCHAR}
    </select>

    <insert id="saveMember">
        INSERT INTO member (
                            id,
                            email,
                            nickname,
                            role,
                            platform,
                            refresh_token
        )
        VALUES (
            #{id},
            #{email},
            #{nickname},
            #{role},
            #{platform},
            #{refreshToken}
        )
    </insert>

    <select id="getUser" resultType="Member">
        SELECT id
        , email
        , nickname
        , role
        , img_url AS "imgUrl"
        , platform
        , created_date AS "createdDate"
        , updated_date AS "updatedDate"
        , IS_DELETED AS "isDeleted"
        FROM   member
        WHERE  id = #{id}
    </select>

    <select id="getMemberList" resultType="Member">
        SELECT id
        , email
        , nickname
        , role
        , img_url AS "imgUrl"
        , platform
        , created_date AS "createdDate"
        , updated_date AS "updatedDate"
        , IS_DELETED AS "isDeleted"
        FROM   member
    </select>

    <insert id="insertMember" parameterType="Member">
        INSERT INTO member (id, email, nickname, role, img_url, platform, is_deleted)
        VALUES (
        #{id}
        , #{email, jdbcType=VARCHAR}
        , #{nickname, jdbcType=VARCHAR}
        , #{role, jdbcType=VARCHAR}
        , #{imgUrl, jdbcType=VARCHAR}
        , #{platform, jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateMember" parameterType="Member">
        UPDATE member
        SET nickname = #{nickname, jdbcType=VARCHAR}
        , img_url = #{imgUrl, jdbcType=VARCHAR}
        , updated_date = sysdate
        WHERE id = #{id}
    </update>

    <update id="updateDeletedMember" parameterType="Member">
        UPDATE member
        SET is_deleted = 0
        , nickname = #{nickname, jdbcType=VARCHAR}
        , updated_date = sysdate
        WHERE id = #{id}
    </update>

    <delete id="deleteMember" parameterType="Member">
        UPDATE member
        SET is_deleted = 1
        , updated_date = sysdate
        WHERE id = #{id}
    </delete>

    <select id="getMemberByEmail" resultType="Member">
        SELECT id
        , email
        , nickname
        , role
        , img_url AS "imgUrl"
        , platform
        , created_date AS "createdDate"
        , updated_date AS "updatedDate"
        , IS_DELETED AS "isDeleted"
        FROM   member
        WHERE  email like #{email}
    </select>

</mapper>